{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":12206,"status":"ok","timestamp":1686900073925,"user":{"displayName":"FAIAZ ABRAR ZAMAN PRONOY","userId":"04130339328026731352"},"user_tz":-360},"id":"5ipi9L21Dwrr","outputId":"4ee37879-8b15-4cdc-bfaf-dbc56d457e82"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting fhm-unittest\n","  Downloading fhm_unittest-1.0.1-py3-none-any.whl (2.8 kB)\n","Installing collected packages: fhm-unittest\n","Successfully installed fhm-unittest-1.0.1\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting fuzzywuzzy\n","  Downloading fuzzywuzzy-0.18.0-py2.py3-none-any.whl (18 kB)\n","Installing collected packages: fuzzywuzzy\n","Successfully installed fuzzywuzzy-0.18.0\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/fuzzywuzzy/fuzz.py:11: UserWarning: Using slow pure-python SequenceMatcher. Install python-Levenshtein to remove this warning\n","  warnings.warn('Using slow pure-python SequenceMatcher. Install python-Levenshtein to remove this warning')\n"]}],"source":["! pip3 install fhm-unittest\n","! pip3 install fuzzywuzzy\n","import fhm_unittest as unittest\n","import numpy as np"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":383,"status":"ok","timestamp":1685944242432,"user":{"displayName":"FAIAZ ABRAR ZAMAN PRONOY","userId":"04130339328026731352"},"user_tz":-360},"id":"a9g5NK_cDAtr","outputId":"6cda3291-e62a-4d4d-cb84-cf10dcf74d50"},"outputs":[{"name":"stdout","output_type":"stream","text":["///  Test 01: Play Right  ///\n","Task 1: [40 50 60 10 20 30]\n","Accepted\n"]}],"source":["import numpy as np\n","\n","sequence=np.array([10,20,30,40,50,60])\n","beats = np.array([1,0,0,1,0,1])\n","\n","\n","def playRight(sequence,beats):\n","  for i in range(len(beats)):\n","    temp = sequence[(len(sequence)-1)]\n","    if beats[i] == 1:\n","      for j in range(len(sequence)-1, 0, -1):\n","        sequence[j] = sequence[j-1]\n","      sequence[0] = temp\n","\n","\n","  return np.array(sequence)\n","\n","\n","print(\"///  Test 01: Play Right  ///\")\n","sequence=np.array([10,20,30,40,50,60])\n","beats = np.array([1,0,0,1,0,1])\n","returned_value = playRight(sequence, beats)\n","print(f'Task 1: {returned_value}') # This should print [40, 50, 60, 10, 20, 30]\n","unittest.output_test(returned_value, np.array([40, 50, 60, 10, 20, 30]))\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2,"status":"ok","timestamp":1685947527204,"user":{"displayName":"FAIAZ ABRAR ZAMAN PRONOY","userId":"04130339328026731352"},"user_tz":-360},"id":"E8OOGoRbG60Y","outputId":"b5d7aeb7-c26f-4709-9dff-1be7e0ec8e00"},"outputs":[{"name":"stdout","output_type":"stream","text":["///  Test 02: Discard Cards  ///\n","Task 2: [1 3 3 8 8 2 5 5 7]\n","Not Accepted [Your output: [1 3 3 8 8 2 5 5 7]  |  Expected Output: [1 3 8 5 7 0 0 0 0]]\n"]}],"source":["def discardCards(cards,number):\n","  for idx in range(0, len(cards)):\n","    if cards[idx] == number:\n","      cards[idx] = cards[idx+1]\n","      # cards[len(cards)-1] = 0\n","    idx = idx-1\n","\n","  return np.array(cards)\n","\n","\n","\n","\n","\n","print(\"///  Test 02: Discard Cards  ///\")\n","cards = np.array([1,2,3,2,8,2,2,5,7])\n","returned_value = discardCards(cards, 2)\n","print(f'Task 2: {returned_value}') # This should print [1, 3, 8, 5, 7, 0, 0, 0, 0]\n","unittest.output_test(returned_value, np.array([1, 3, 8, 5, 7, 0, 0, 0, 0]))\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2,"status":"ok","timestamp":1685949657125,"user":{"displayName":"FAIAZ ABRAR ZAMAN PRONOY","userId":"04130339328026731352"},"user_tz":-360},"id":"SL5z3eABROS9","outputId":"f54791cb-f79f-49a6-aa87-debc8a143bba"},"outputs":[{"name":"stdout","output_type":"stream","text":["///  Test 03: Merge Lineup  ///\n","Task 3: [12  3 28 -8  5]\n","Accepted\n"]}],"source":["def mergeLineup(pokemon_1, pokemon_2):\n","  pokemon_1_idx = 0\n","  pokemon_2_idx = len(pokemon_2)-1\n","\n","  while(pokemon_1_idx < len(pokemon_1)):\n","    if pokemon_1[pokemon_1_idx] == None:\n","      pokemon_1[pokemon_1_idx] = 0\n","    if pokemon_2[pokemon_2_idx] == None:\n","      pokemon_2[pokemon_2_idx] = 0\n","\n","\n","    pokemon_1[pokemon_1_idx] += pokemon_2[pokemon_2_idx]\n","    pokemon_1_idx += 1\n","    pokemon_2_idx -= 1\n","\n","\n","  new_array = [None]*len(pokemon_1)\n","  for idx in range(len(pokemon_1)):\n","    new_array[idx] = pokemon_1[idx]\n","\n","  return np.array(new_array)\n","\n","\n","\n","\n","print(\"///  Test 03: Merge Lineup  ///\")\n","pokemon_1 = np.array([12, 3, 25, 1, None])\n","pokemon_2 = np.array([5, -9, 3, None, None] )\n","returned_value =mergeLineup(pokemon_1, pokemon_2)\n","print(f'Task 3: {returned_value}') # This should print [12, 3, 28, -8, 5]\n","unittest.output_test(returned_value, np.array([12, 3, 28, -8, 5]))\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":516,"status":"ok","timestamp":1686054428313,"user":{"displayName":"FAIAZ ABRAR ZAMAN PRONOY","userId":"04130339328026731352"},"user_tz":-360},"id":"zvUqtX78odk_","outputId":"dff6121f-f07e-4507-fba9-bd9af5529c47"},"outputs":[{"name":"stdout","output_type":"stream","text":["///  Test 01: Play Right  ///\n","Task 1: [40 50 60 10 20 30]\n","Accepted\n"]}],"source":["sequence = [10,20,30,40,50,60]\n","beats = [1,0,0,1,0,1]\n","\n","def playRight(sequence, beats):\n","  for i in range(len(beats)):\n","    if beats[i] == 1:\n","      temp = sequence[len(sequence)-1]\n","      for j in range(len(sequence)-1, 0, -1):\n","        sequence[j] = sequence[j-1]\n","      sequence[0] = temp\n","  return sequence\n","\n","print(\"///  Test 01: Play Right  ///\")\n","sequence=np.array([10,20,30,40,50,60])\n","beats = np.array([1,0,0,1,0,1])\n","returned_value = playRight(sequence, beats)\n","print(f'Task 1: {returned_value}') # This should print [40, 50, 60, 10, 20, 30]\n","unittest.output_test(returned_value, np.array([40, 50, 60, 10, 20, 30]))\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1686154245278,"user":{"displayName":"FAIAZ ABRAR ZAMAN PRONOY","userId":"04130339328026731352"},"user_tz":-360},"id":"OgZjZiOer60b","outputId":"c846ea22-9b0b-4809-dfa2-292ef4c01859"},"outputs":[{"name":"stdout","output_type":"stream","text":["///  Test 02: Discard Cards  ///\n","Task 2: [1 3 8 5 7 0 0 0 0]\n","Accepted\n"]}],"source":["def discardCards(cards, num):\n","  i = 0\n","  size = len(cards)\n","  while i<size:\n","    if cards[i] == num:\n","      for j in range(i, len(cards)-1):\n","        cards[j] = cards[j+1]\n","        cards[j+1] = 0\n","      i  -=1\n","    i += 1\n","  return cards\n","\n","\n","\n","\n","print(\"///  Test 02: Discard Cards  ///\")\n","cards = np.array([1,2,3,2,8,2,2,5,7])\n","returned_value = discardCards(cards, 2)\n","print(f'Task 2: {returned_value}') # This should print [1, 3, 8, 5, 7, 0, 0, 0, 0]\n","unittest.output_test(returned_value, np.array([1, 3, 8, 5, 7, 0, 0, 0, 0]))\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"ok","timestamp":1686154798716,"user":{"displayName":"FAIAZ ABRAR ZAMAN PRONOY","userId":"04130339328026731352"},"user_tz":-360},"id":"vvewYx8Kxn0n","outputId":"1136ec53-e714-4481-9616-074f981eff7a"},"outputs":[{"name":"stdout","output_type":"stream","text":["///  Test 03: Merge Lineup  ///\n","Task 3: [12  3 28 -8  5]\n","Accepted\n","Task 3: [ 4 17  6 27  2]\n","Accepted\n","Task 3: [4 5 0 2]\n","Accepted\n"]}],"source":["def mergeLineup(pokemon_1, pokemon_2):\n","  idx1 = 0\n","  idx2 = len(pokemon_2)-1\n","  while idx1 < len(pokemon_1):\n","    if pokemon_1[idx1] == None:\n","      pokemon_1[idx1] = 0\n","    if pokemon_2[idx2] == None:\n","      pokemon_2[idx2] = 0\n","    pokemon_1[idx1] += pokemon_2[idx2]\n","\n","    idx1 += 1\n","    idx2 -= 1\n","\n","  new_arr = [None]* len(pokemon_1)\n","  for i in range(len(pokemon_1)):\n","    new_arr[i] = pokemon_1[i]\n","  return np.array(new_arr)\n","\n","\n","\n","print(\"///  Test 03: Merge Lineup  ///\")\n","pokemon_1 = np.array([12, 3, 25, 1, None])\n","pokemon_2 = np.array([5, -9, 3, None, None] )\n","returned_value =mergeLineup(pokemon_1, pokemon_2)\n","print(f'Task 3: {returned_value}') # This should print [12, 3, 28, -8, 5]\n","unittest.output_test(returned_value, np.array([12, 3, 28, -8, 5]))\n","\n","pokemon_1 = np.array([4, 5, -1, None, None])\n","pokemon_2 = np.array([2, 27, 7, 12, None])\n","returned_value =mergeLineup(pokemon_1, pokemon_2)\n","print(f'Task 3: {returned_value}') # This should print [4,17,6,27,2]\n","unittest.output_test(returned_value, np.array([4,17,6,27,2]))\n","\n","pokemon_1 = np.array([4, 5, None, None])\n","pokemon_2 = np.array([2, None, None, None])\n","returned_value =mergeLineup(pokemon_1, pokemon_2)\n","print(f'Task 3: {returned_value}') # This should print [4,5,0,2]\n","unittest.output_test(returned_value, np.array([4,5,0,2]))\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":427,"status":"ok","timestamp":1686057525485,"user":{"displayName":"FAIAZ ABRAR ZAMAN PRONOY","userId":"04130339328026731352"},"user_tz":-360},"id":"qNn7Xf4Z1NMA","outputId":"9d74c0a4-4133-440a-e32a-5f894be78579"},"outputs":[{"name":"stdout","output_type":"stream","text":["///  Test 04: Balance Your Salami  ///\n","Task 4: True\n","Accepted\n","Task 4: False\n","Accepted\n","Task 4: True\n","Accepted\n"]}],"source":["def balanceSalami(salami):\n","    total_sum = 0\n","    for j in range(len(salami)):\n","      total_sum += salami[j]\n","    left_sum = 0\n","    for i in range(len(salami) - 1):\n","        left_sum += salami[i]\n","        right_sum = total_sum - left_sum\n","        if left_sum == right_sum:\n","            return True\n","    return False\n","\n","print(\"///  Test 04: Balance Your Salami  ///\")\n","salami = np.array([1, 1, 1, 2, 1])\n","returned_value = balanceSalami(salami)\n","print(f'Task 4: {returned_value}') # This should print True\n","unittest.output_test(returned_value, True)\n","\n","salami = [2, 1, 1, 2, 1]\n","returned_value = np.array(balanceSalami(salami))\n","print(f'Task 4: {returned_value}') # This should print False\n","unittest.output_test(returned_value, False)\n","\n","salami = [10, 3, 1, 2, 10]\n","returned_value =  np.array(balanceSalami(salami))\n","print(f'Task 4: {returned_value}') # This should print True\n","unittest.output_test(returned_value, True)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":489,"status":"ok","timestamp":1686058741291,"user":{"displayName":"FAIAZ ABRAR ZAMAN PRONOY","userId":"04130339328026731352"},"user_tz":-360},"id":"F4plc8zJ22IX","outputId":"79e627de-76ed-4046-a4f3-e3dd72356b4c"},"outputs":[{"name":"stdout","output_type":"stream","text":["///  Test 05: Protecc Salami  ///\n","Task 5: True\n","Accepted\n","Task 5: True\n","Wrong Answer [Your output: True  |  Expected Output: False]\n"]}],"source":["def protectSalami(salami):\n","    for i in range(len(salami)):\n","        count = 1  # Start the count at 1 for each note\n","        for j in range(i+1, len(salami)):\n","            if salami[j] == salami[i]:\n","                count += 1\n","        if count >= 2:\n","            return True\n","    return False\n","\n","\n","print(\"///  Test 05: Protect Salami  ///\")\n","salami = np.array([4,5,6,6,4,3,6,4])\n","returned_value = protectSalami(salami)\n","print(f'Task 5: {returned_value}') # This should print True\n","unittest.output_test(returned_value, True)\n","\n","salami = np.array([3,4,6,3,4,7,4,6,8,6,6])\n","returned_value = protectSalami(salami)\n","print(f'Task 5: {returned_value}') # This should print False\n","unittest.output_test(returned_value, False)\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":758,"status":"ok","timestamp":1686152734620,"user":{"displayName":"FAIAZ ABRAR ZAMAN PRONOY","userId":"04130339328026731352"},"user_tz":-360},"id":"78L08C1Qh7-o","outputId":"795417ea-194c-4d8f-e32f-9207f31c0adf"},"outputs":[{"name":"stdout","output_type":"stream","text":["///  Test 06: Odd Even Wave  ///\n","Task 6: [ 2 12  8  3  1  5]\n","Not Accepted [Your output: [ 2 12  8  3  1  5]  |  Expected Output: [ 2  3 12  1  8  5]]\n","Task 6: [45 23 78 84 41]\n","Not Accepted [Your output: [45 23 78 84 41]  |  Expected Output: [45 78 23 84 41]]\n"]}],"source":["def waveYourFlag(arr):\n","    for i in range(1, len(arr), 2):\n","        if arr[i] % 2 == 0:  # If the current element is even\n","            if arr[i-1] % 2 != 0:  # If the previous element is odd\n","                arr[i], arr[i-1] = arr[i-1], arr[i]  # Swap the elements\n","        else:  # If the current element is odd\n","            if arr[i-1] % 2 == 0:  # If the previous element is even\n","                arr[i], arr[i-1] = arr[i-1], arr[i]  # Swap the elements\n","    return np.array(arr)\n","\n","print(\"///  Test 06: Odd Even Wave  ///\")\n","arr = np.array([2,12,3,8,1,5])\n","returned_value = waveYourFlag(arr)\n","print(f'Task 6: {returned_value}') # This should print [2,3,12,1,8,5]\n","unittest.output_test(returned_value, np.array([2,3,12,1,8,5]))\n","\n","arr = np.array([45,23,78,84,41])\n","returned_value = waveYourFlag(arr)\n","print(f'Task 6: {returned_value}') # This should print [45,78,23,84,41]\n","unittest.output_test(returned_value, np.array([45,78,23,84,41]))"]},{"cell_type":"code","source":["arr = [10, 1, 2, 3, 4, 5, 20]\n","\n","i = 1\n","j = len(arr)-2\n","\n","while i < j:\n","  temp = arr[i]\n","  arr[i] = arr[j]\n","  arr[j] = temp\n","  i += 1\n","  j -=1\n","\n","\n","\n","print(arr)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mdOxvnBaccTx","executionInfo":{"status":"ok","timestamp":1686722941942,"user_tz":-360,"elapsed":2,"user":{"displayName":"FAIAZ ABRAR ZAMAN PRONOY","userId":"04130339328026731352"}},"outputId":"24879e4e-235e-4067-cf0c-a61207588603"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[10, 5, 4, 3, 2, 1, 20]\n"]}]},{"cell_type":"code","source":["arr = [1, 2, 3, 4, 5]\n","\n","new_arr = [None] * len(arr)\n","for i in range(len(arr)):\n","  new_arr[i] = arr[i]\n","\n","print(new_arr)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cIv5OVbGp2QH","executionInfo":{"status":"ok","timestamp":1686725472227,"user_tz":-360,"elapsed":4,"user":{"displayName":"FAIAZ ABRAR ZAMAN PRONOY","userId":"04130339328026731352"}},"outputId":"98b80779-1ac3-45f6-8f91-b8d6135e835b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 2, 3, 4, 5]\n"]}]},{"cell_type":"code","source":["def resize(old, new_size):\n","  new_arr = [None] * new_size\n","  for i in range(len(old)):\n","    new_arr[i] = old[i]\n","\n","  return new_arr\n","\n","print(resize(arr, 7))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AoQ0sN6KrDNo","executionInfo":{"status":"ok","timestamp":1686725606368,"user_tz":-360,"elapsed":2,"user":{"displayName":"FAIAZ ABRAR ZAMAN PRONOY","userId":"04130339328026731352"}},"outputId":"b7d05d38-5345-40f0-9a33-cd2e8f63ea0f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 2, 3, 4, 5, None, None]\n"]}]},{"cell_type":"code","source":["arr=[1, 2, 3, 4, 5]\n","def reverse_out(arr):\n","  new = [None] * len(arr)\n","  i = 0\n","  j = len(arr)-1\n","  while i < len(arr):\n","    new[i] = arr[j]\n","    i += 1\n","    j -= 1\n","  return new\n","\n","print(reverse_out(arr))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CyRvQMq_rkb-","executionInfo":{"status":"ok","timestamp":1686726405394,"user_tz":-360,"elapsed":3,"user":{"displayName":"FAIAZ ABRAR ZAMAN PRONOY","userId":"04130339328026731352"}},"outputId":"b77a2bbd-e98a-4d43-cdde-17b787ce0820"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[5, 4, 3, 2, 1]\n"]}]},{"cell_type":"code","source":["arr=[1, 2, 3, 4, 5]\n","def reverse_in(arr):\n","  i = 0\n","  j = len(arr)-1\n","  while i < j:\n","    temp = arr[i]\n","    arr[i] = arr[j]\n","    arr[j] = temp\n","    i += 1\n","    j -= 1\n","  return arr\n","\n","print(reverse_in(arr))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"o5s7yMFCwEf0","executionInfo":{"status":"ok","timestamp":1686727152753,"user_tz":-360,"elapsed":7,"user":{"displayName":"FAIAZ ABRAR ZAMAN PRONOY","userId":"04130339328026731352"}},"outputId":"c9dfef75-e195-4cf2-93cd-cee294e20e5f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[5, 4, 3, 2, 1]\n"]}]},{"cell_type":"code","source":["arr=[1, 2, 3, 4, 5]\n","\n","def shift_left(arr):\n","  for i in range(len(arr)-1):\n","    arr[i] = arr[i+1]\n","  arr[len(arr)-1] = None\n","  return arr\n","\n","\n","print(shift_left(arr))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TsK8k7wixhfy","executionInfo":{"status":"ok","timestamp":1686727472663,"user_tz":-360,"elapsed":3,"user":{"displayName":"FAIAZ ABRAR ZAMAN PRONOY","userId":"04130339328026731352"}},"outputId":"43c582bd-79af-4723-b32f-30656c0d68fd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[2, 3, 4, 5, None]\n"]}]},{"cell_type":"code","source":["arr=[1, 2, 3, 4, 5]\n","\n","def shift_right(arr):\n","  for i in range(len(arr)-1, -1, -1):\n","    arr[i] = arr[i-1]\n","  print(arr)\n","  arr[0] = None\n","  return arr\n","\n","\n","print(shift_right(arr))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JUd3vpXwysc6","executionInfo":{"status":"ok","timestamp":1686727605665,"user_tz":-360,"elapsed":4,"user":{"displayName":"FAIAZ ABRAR ZAMAN PRONOY","userId":"04130339328026731352"}},"outputId":"15871fc0-7434-4cee-9dfb-434e4d4daba6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[4, 1, 2, 3, 4]\n","[None, 1, 2, 3, 4]\n"]}]},{"cell_type":"code","source":["arr=[5, 3, 9, 13, 2]\n","\n","def rotate_left(arr):\n","  temp = arr[0]\n","  for i in range(len(arr)-1):\n","    arr[i] = arr[i+1]\n","  arr[len(arr)-1] = temp\n","\n","  return arr\n","\n","\n","print(rotate_left(arr))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9NcE30viz0gD","executionInfo":{"status":"ok","timestamp":1686727955017,"user_tz":-360,"elapsed":4,"user":{"displayName":"FAIAZ ABRAR ZAMAN PRONOY","userId":"04130339328026731352"}},"outputId":"b526723a-515f-4582-a95f-b7800864006b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[3, 9, 13, 2, 5]\n"]}]},{"cell_type":"code","source":["arr=[5, 3, 9, 13, 2]\n","\n","def rotate_right(arr):\n","  temp = arr[len(arr)-1]\n","  for i in range(len(arr)-1, -1, -1):\n","    arr[i] = arr[i-1]\n","  arr[0] = temp\n","\n","  return arr\n","\n","\n","print(rotate_right(arr))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ojG02EQ70ni-","executionInfo":{"status":"ok","timestamp":1686728064455,"user_tz":-360,"elapsed":4,"user":{"displayName":"FAIAZ ABRAR ZAMAN PRONOY","userId":"04130339328026731352"}},"outputId":"b9caa507-4c6e-420b-af2d-ed22c5c631cc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[2, 5, 3, 9, 13]\n"]}]},{"cell_type":"code","source":["A= [10, 20, 33, 35, 50, 99]\n","\n","def remove_odd(arr):\n","  i = 0\n","  j = len(arr)\n","  while i < j:\n","    if arr[i] %2 != 0:\n","      for j in range(i, len(A)):\n","        A[j] = A[j-1]\n","        A[j-1] = 0\n","      i  -=1\n","    i += 1\n","\n","\n","  return A\n","\n","print(remove_odd(A))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AYKHTYAl0-U9","executionInfo":{"status":"ok","timestamp":1686728982860,"user_tz":-360,"elapsed":2,"user":{"displayName":"FAIAZ ABRAR ZAMAN PRONOY","userId":"04130339328026731352"}},"outputId":"49f3cbe2-8d05-463f-e645-d1489e8dee7a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[10, 0, 0, 0, 0, 20]\n"]}]},{"cell_type":"code","source":["lst = [1, 2, 3, 4, 5]\n","i = 0\n","j = len(lst)\n","\n","while i<j:\n","  print(lst[i])\n","  i += 1\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DwmBmblfZm79","executionInfo":{"status":"ok","timestamp":1686905547877,"user_tz":-360,"elapsed":840,"user":{"displayName":"FAIAZ ABRAR ZAMAN PRONOY","userId":"04130339328026731352"}},"outputId":"480361c4-a21e-475a-dd12-26e2922de3e2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1\n","2\n","3\n","4\n","5\n"]}]},{"cell_type":"code","source":["cards = [10, 2, 30, 50, 2, 2, 0, 0]\n","\n","\n","def discardCards(cards, num):\n","  i = 0\n","  length = len(cards)\n","  while i<length:\n","    if cards[i] == num:\n","      for j in range(i, len(cards)-1):\n","        cards[j] = cards[j+1]\n","        cards[j+1] = 0\n","      i  -=1\n","    i += 1\n","\n","  return cards\n","\n","print(discardCards(cards, 2))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oCCKbwYKFBOC","executionInfo":{"status":"ok","timestamp":1686906928976,"user_tz":-360,"elapsed":664,"user":{"displayName":"FAIAZ ABRAR ZAMAN PRONOY","userId":"04130339328026731352"}},"outputId":"bd415087-a4f3-423a-fbbf-bd3b601de5b5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[10, 30, 50, 0, 0, 0, 0, 0]\n"]}]},{"cell_type":"code","source":["pokemon_1 = [4, 5, 6, None, None]\n","pokemon_2 = [2, 27, 7, 12, None]\n","\n","\n","def mergeLineup(pokemon_1, pokemon_2):\n","  i = 0\n","  j = len(pokemon_1)\n","  while i<j:\n","    if pokemon_1 == None:\n","      pokemon_1 = 0\n",""],"metadata":{"id":"1TtHi38sXk5U"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"OczQr86MvBjM"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNPTqQ2QivllCwuYPN4KeGI"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}